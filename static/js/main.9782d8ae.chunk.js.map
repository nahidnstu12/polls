{"version":3,"sources":["Sidebar/AddPollModal.js","Sidebar/PollList.js","Sidebar/sidebarComponent.js","MainComponent/pollComponent.js","MainComponent/mainComponent.js","data.js","App.js","serviceWorker.js","index.js"],"names":["defaultOptions","id","shortid","generate","value","vote","resetOptions","PollModal","modal","toggle","submit","btnValue","header","poll","isUpdate","useState","basetitle","setTitle","description","setDescript","options","setOptions","errors","setErrors","useEffect","Object","keys","length","title","state","Modal","isOpen","unmountOnClose","ModalHeader","ModalBody","Form","onSubmit","e","preventDefault","optionError","forEach","opt","index","isValid","validate","alert","target","reset","FormGroup","Input","type","placeholder","className","onChange","name","invalid","FormFeedback","Button","color","onClick","option","push","map","ind","key","event","handleOptionChange","disabled","splice","deleteOption","PollList","polls","selectPoll","ListGroup","ListGroupItem","style","cursor","substr","Sidebar","handleSearch","setModal","inline","toLowerCase","Poll","getOpinion","deletePoll","setName","selectedOption","setOption","selectOption","Row","Col","md","window","confirm","pollId","CustomInput","label","Badge","fontSize","totalVote","Math","ceil","Label","MainContent","Polls","created","Date","opinions","App","setPolls","selectedPoll","setSelectedPoll","searchTerm","setSearchTerm","allPolls","filter","includes","Container","find","p","val","concat","res","opinion","updatePoll","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9782d8ae.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody,Form,FormGroup,Input,FormFeedback } from 'reactstrap';\r\nimport shortid from 'shortid';\r\n\r\nconst defaultOptions = [\r\n    {id:shortid.generate(),value:'',vote:0},\r\n    {id:shortid.generate(),value:'',vote:0},\r\n];\r\nconst resetOptions = [\r\n    {id:shortid.generate(),value:'',vote:0},\r\n    {id:shortid.generate(),value:'',vote:0},\r\n];\r\n\r\nfunction PollModal({modal,toggle,submit,btnValue,header,poll,isUpdate}) {\r\n\r\n    const [basetitle,setTitle] = useState('');\r\n    const [description,setDescript] = useState('');\r\n    const [options,setOptions] = useState(defaultOptions);\r\n    const [errors,setErrors] = useState({});\r\n\r\n    useEffect(() => {\r\n        if(poll && Object.keys(poll).length>0){\r\n            setTitle(poll.title);\r\n            setDescript(poll.description);\r\n            setOptions(poll.options)\r\n        }\r\n    },[poll])\r\n\r\n    const handleOptionChange = (event,index) => {\r\n        const option = [...options];\r\n        option[index].value = event.target.value;\r\n        setOptions(option);\r\n    }\r\n   \r\n    const createOptions = () => {\r\n        const option = [...options];\r\n        if(option.length < 5){\r\n            option.push({\r\n                id:shortid.generate(),\r\n                value:'',\r\n                vote: 0\r\n            })\r\n           setOptions(option);\r\n        }\r\n        else{\r\n            alert(\"You can create max 5 options\");\r\n        }\r\n    }\r\n    const deleteOption = index => {\r\n        const option = [...options];\r\n        if(option.length > 2){\r\n            option.splice(index,1);       \r\n            setOptions(option);         \r\n        }else{\r\n            alert('You must atleast two options');\r\n        }\r\n    }\r\n\r\n    const validate = () =>{\r\n        const errors = {}\r\n        if(!basetitle){\r\n            errors.title = 'Please Provide A Poll Title';\r\n        }else if(basetitle.length < 5){\r\n            errors.title = 'Title too short';\r\n        }else if(basetitle.length > 100){\r\n            errors.title = 'Title too long'\r\n        }\r\n\r\n        if(!description){\r\n            errors.description = 'Please Provide A Poll description';\r\n        \r\n        }else if(description.length > 500){\r\n            errors.description = 'Description too long'\r\n        }\r\n        const optionError = []\r\n        options.forEach((opt,index)=>{\r\n            if(!opt.value){\r\n            optionError[index] = \"Option Empty\";\r\n            }else if(opt.value.length > 20){\r\n                optionError[index] = 'Option Text too long';\r\n            }\r\n        })\r\n        if(optionError.length>0){\r\n            errors.options = optionError\r\n        }\r\n        return {\r\n            errors,\r\n            isValid:Object.keys(errors).length === 0\r\n        }\r\n\r\n    }\r\n    const state = {\r\n        title:basetitle,\r\n        description,\r\n        options\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        const {isValid,errors} = validate();\r\n        if(isValid){\r\n            if(isUpdate){\r\n                state.id = poll.id;\r\n                submit(state);\r\n                alert(\"Update is Successfully\")\r\n            }else{\r\n                  // rsetting form\r\n                submit(state);\r\n                alert(\"Submit Successfully\");\r\n                e.target.reset();\r\n                setTitle('');\r\n                setDescript('');\r\n                setOptions(resetOptions);\r\n                setErrors({});\r\n            }\r\n           \r\n        }else{\r\n            setErrors(errors);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={modal} toggle={toggle} unmountOnClose={true}>\r\n                <ModalHeader toggle={toggle}>{header}</ModalHeader>\r\n                <ModalBody>\r\n                <Form onSubmit={ handleSubmit }>\r\n                <FormGroup>\r\n                    <Input type=\"text\" placeholder=\"Give a poll title\" className=\"my-2\" value={ basetitle } onChange={(e)=>setTitle(e.target.value)} name=\"title\" invalid ={errors.title ? true : false}\r\n                    />\r\n                    {errors.title && <FormFeedback>{errors.title}</FormFeedback>}\r\n\r\n                    <Input type=\"textarea\" placeholder=\"Give a poll description\" name=\"description\" onChange={(e)=>setDescript(e.target.value)} value={ description } invalid ={errors.description ? true : false}/>\r\n                    {errors.description && <FormFeedback>{errors.description}</FormFeedback>}\r\n                </FormGroup>\r\n                <FormGroup>\r\n                   <div> <span>Enter a option</span> <Button color=\"info\" className=\"ml-3\" onClick={createOptions}>Add New Options</Button> </div> \r\n                   {options.map((opt,ind)=>(\r\n                       <div className=\"d-flex my-2\" key={opt.id}>\r\n                           <Input value={opt.value } onChange={e => handleOptionChange(e,ind)} invalid={errors.options && errors.options[ind] ? true : false}/>\r\n                           <Button color=\"danger\" disabled={options.length <= 2} className=\"ml-2\" onClick={()=> deleteOption(ind)}>Delete</Button>\r\n                           {errors.options && <FormFeedback>{errors.options[ind]}</FormFeedback>}\r\n                       </div>\r\n                   ))}\r\n                </FormGroup>\r\n                <Button color=\"primary\">{btnValue}</Button>\r\n            </Form>\r\n            </ModalBody>\r\n            \r\n        </Modal>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default PollModal\r\n","import React from 'react'\r\nimport {ListGroup,ListGroupItem}  from 'reactstrap';\r\n\r\nfunction PollList({polls,selectPoll}) {\r\n    \r\n    return (\r\n       <ListGroup>\r\n           {polls.map(poll => (\r\n               <ListGroupItem key={poll.id} style={{ cursor: \"pointer\"}} title={poll.title} onClick={()=> selectPoll(poll.id)}>\r\n                {poll.title.length > 30 ? poll.title.substr(0,30)+\"...\" : poll.title}\r\n               </ListGroupItem>\r\n           ))}\r\n       </ListGroup>\r\n    )\r\n} \r\nexport default PollList\r\n","import React,{useState} from 'react';\r\nimport { Form, FormGroup,Input,Button} from 'reactstrap';\r\nimport PollModal from './AddPollModal';\r\nimport PollList from './PollList';\r\n\r\nfunction Sidebar({polls,selectPoll,handleSearch,submit}) {\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n   \r\n    return (\r\n        <div>\r\n            <Form inline>\r\n                <FormGroup className=\"mr-2\">\r\n                    <Input type=\"search\" name=\"search\" placeholder=\"Search Polls\" \r\n                         onChange={e => handleSearch(e.target.value.toLowerCase())} \r\n                        />\r\n                </FormGroup>\r\n                <Button color=\"success\" onClick={toggle}>Add Poll</Button>\r\n                <PollModal modal={modal} toggle={toggle} submit={submit} btnValue=\"Submit Poll\" header=\"Create A New Poll\"/>\r\n            </Form>\r\n            <div className=\"mt-5\">\r\n                <h3>Lists of polls</h3>\r\n                <PollList polls={polls} selectPoll={selectPoll}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState } from 'react'\r\nimport {Form,FormGroup,CustomInput,Row,Col, Button,Badge, Label,Input,FormFeedback} from 'reactstrap';\r\nimport PollModal from '../Sidebar/AddPollModal';\r\n\r\nfunction Poll({poll,getOpinion,deletePoll,submit}) {\r\n\r\n    const [name,setName] = useState('');\r\n    const [selectedOption,setOption] = useState('');\r\n    const [errors,setErrors] = useState({});\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n        const {errors,isValid} = validate();\r\n        if(isValid){\r\n            getOpinion ({\r\n                pollId:poll.id,\r\n                name,\r\n                selectedOption\r\n            })\r\n            // Resetting\r\n           e.target.reset();\r\n           setName('');\r\n           setOption('');\r\n           setErrors({})\r\n        }else{\r\n            setErrors(errors);\r\n        }\r\n    }\r\n    const validate = () =>{\r\n        const errors = {};\r\n        if(!selectedOption){\r\n            errors.selectOption = \"Please Select Option\";\r\n        }\r\n        if(!name){\r\n            errors.name = \"Please provide a name\";\r\n        }\r\n        else if(name.length < 3){\r\n            errors.title = 'Name too short';\r\n        }\r\n        return {\r\n            errors,\r\n            isValid:Object.keys(errors).length === 0\r\n        }\r\n    }\r\n    const handleDelete = () =>{\r\n        const confirm = window.confirm(\"Are You Sure to perform this action?\");\r\n        if(confirm){\r\n        deletePoll(poll.id)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n        \r\n            <h3>{poll.title}</h3>\r\n            <p>{poll.description}</p>\r\n            <Row className=\"mb-5 mt-4\">\r\n                <Col md={6}>\r\n                    <h3>Options</h3>\r\n                </Col>\r\n                <Col>\r\n                    <Button color=\"warning\" className=\"mr-2\" onClick={toggle}>Edit</Button>\r\n                    <Button color=\"danger\" onClick={handleDelete}>Delete</Button>\r\n                </Col>\r\n            </Row>\r\n            <PollModal modal={modal} toggle={toggle} submit={submit} btnValue=\"Update Poll\" header=\"Update Poll Form\" poll={poll} isUpdate={true}/>\r\n\r\n            <Form onSubmit = {handleSubmit}>\r\n            {poll.options.map((opt)=>(\r\n            <Row key={opt.id}>\r\n                <Col>\r\n                    <FormGroup>\r\n                    <CustomInput  type=\"radio\"  name=\"selectedOption\" id={opt.id} onChange={(e)=>setOption(e.target.value)} label={opt.value} value={opt.id} invalid={errors.selectOption ? true : false}/>\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                    <Badge color=\"primary\" className=\"m-2 p-3\" style={{ fontSize: \"100%\" }}>{opt.vote}</Badge>\r\n                    <Badge color=\"danger\" className=\"p-3\" style={{ fontSize: \"100%\" }}>{poll.totalVote > 0 ? Math.ceil((100*opt.vote) / poll.totalVote): 0 }%</Badge>\r\n                </Col>\r\n                {errors.selectOption && <FormFeedback>{errors.selectOption}</FormFeedback>}\r\n            </Row>\r\n            ))}\r\n            \r\n            <FormGroup>\r\n                <Label>Enter Your Name</Label>\r\n                <Input type=\"text\" name=\"name\" placeholder=\"Your name\" onChange={(e)=>setName(e.target.value)} invalid={errors.name ? true : false}/>\r\n                {errors.name && <FormFeedback>{errors.name}</FormFeedback>}\r\n                <Button color=\"success\" className=\"my-2\">Submit Your Opinion</Button>\r\n            </FormGroup> \r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Poll\r\n","import React from 'react';\r\nimport Poll from './pollComponent';\r\n\r\nfunction MainContent({poll,getOpinion,deletePoll,submit}) {\r\n   \r\n    return (\r\n        <>\r\n        {Object.keys(poll).length === 0 && <div>\r\n            <h3>Welcome to my <em>'Poll App'</em></h3>\r\n            <p>You can create as many poll as you want.Click the new button create new poll.To check details poll,pls click select from the left sidebar.By selecting a poll,you can check its details,perticipate and check other opinion about this poll</p>\r\n        </div> }\r\n\r\n        {Object.keys(poll).length !== 0 &&   <Poll poll={poll} getOpinion={getOpinion} deletePoll={deletePoll} submit={submit}/>}\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainContent\r\n","export const Polls = [\r\n    {\r\n    id:'45',\r\n    title:'What is your favourite programming language?',\r\n    description:'There are lot of programming languages.Among them what is your favourite',\r\n    options:[\r\n        {id: '7113',value:'Java',vote:0},\r\n        {id:'8213',value:'Javascript',vote:0},\r\n        {id:'9333',value:'python',vote:0}\r\n    ],\r\n    created: new Date(),\r\n    totalVote:0,\r\n    opinions:[]\r\n},\r\n{\r\n    id:'44',\r\n    title:'What is your favourite language?',\r\n    description:'There are lot of programming languages.Among them what is your favourite',\r\n    options:[\r\n        {id: '113',value:'Bangla',vote:0},\r\n        {id:'213',value:'English',vote:0},\r\n        {id:'333',value:'German',vote:0}\r\n    ],\r\n    created: new Date(),\r\n    totalVote:0,\r\n    opinions:[]\r\n},\r\n{\r\n    id:'47',\r\n    title:'What is your favourite Framework?',\r\n    description:'There are lot of programming languages.Among them what is your favourite framework',\r\n    options:[\r\n        {id: '413',value:'Spring',vote:0},\r\n        {id:'5213',value:'React',vote:0},\r\n        {id:'6333',value:'Django',vote:0}\r\n    ],\r\n    created: new Date(),\r\n    totalVote:0,\r\n    opinions:[]\r\n}\r\n]","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport {Container,Row,Col} from 'reactstrap';\nimport Sidebar from  './Sidebar/sidebarComponent';\nimport MainContent from './MainComponent/mainComponent';\nimport {Polls} from './data';\nimport shortid from 'shortid';\n\n\nfunction App() {\n\tconst [polls,setPolls] = useState([]);\n\tconst [selectedPoll,setSelectedPoll] = useState({});\n\tconst [searchTerm,setSearchTerm] = useState('');\n\n\tuseEffect(()=>{\n\t\tsetPolls(Polls);\n\t},[])\n\n\tconst selectPoll = (pollId) =>{\n\t\tconst poll = polls.find(p => pollId === p.id);\n\t\tsetSelectedPoll(poll);\n\t}\n\tconst handleSearch = val => {\n\t\tsetSearchTerm(val);\n\t}\n\tconst performSearch = () =>{\n\t\treturn polls.filter(poll => poll.title.toLowerCase().includes(searchTerm));\n\t}\n\tconst addNewPoll = poll => {\n\t\tpoll.id = shortid.generate();\n\t\tpoll.created = new Date();\n\t\tpoll.totalVote = 0;\n\t\tpoll.opinions = [];\n\t\tsetPolls(polls.concat(poll))\n\t}\n\n\tconst getOpinion = res => {\n\t\tconst poll = polls.find(p => p.id === res.pollId)\n\t\tconst option = poll.options.find(opt => opt.id === res.selectedOption);\n\t\tpoll.totalVote++;\n\t\toption.vote++;\n\t\tconst opinion = {\n\t\t\tid:shortid.generate(),\n\t\t\tname:res.name,\n\t\t\tselectedOption:res.selectedOption\n\t\t};\n\t\tpoll.opinions.push(opinion);\n\t\tsetPolls(polls);\n\n\t}\n\tconst updatePoll = updatePoll =>{\n\t\tconst poll = polls.find(p => p.id === updatePoll.id)\n\t\tpoll.title = updatePoll.title;\n\t\tpoll.description = updatePoll.description;\n\t\tpoll.options = updatePoll.options\n\t\tsetPolls(polls);\n\t}\n\tconst deletePoll = pollId => {\n\t\tconst poll = polls.filter(p => p.id !== pollId)\n\t\tsetPolls(poll);\n\t\tsetSelectedPoll({})\n\n\t}\n\tconst allPolls = performSearch();\n\n  return (\n\t  \n    <Container className=\"my-5\">\n      <Row>\n        <Col md={4}>\n          <Sidebar polls={allPolls} selectPoll= {selectPoll} handleSearch={handleSearch} submit={addNewPoll} searchTerm={searchTerm}\n\t\t  />\n        </Col>\n        <Col md={8}>\n\t\t\t<MainContent poll={selectedPoll}  getOpinion={getOpinion} deletePoll= {deletePoll} submit={updatePoll} />\n\t\t</Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}