{"version":3,"sources":["Sidebar/AddPollModal.js","Sidebar/sidebarComponent.js","MainComponent/pollComponent.js","MainComponent/mainComponent.js","App.js","serviceWorker.js","index.js"],"names":["AddPollModal","modal","toggle","Button","color","onClick","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Input","type","placeholder","className","Row","Col","disabled","ModalFooter","Sidebar","useState","setModal","inline","name","Poll","md","CustomInput","label","Badge","style","fontSize","Label","MainContent","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e478a411.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter,Form,FormGroup,Input,Row,Col } from 'reactstrap';\r\n\r\nfunction AddPollModal({modal,toggle}) {\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <Button color=\"success\" onClick={toggle}>Add Poll</Button>\r\n            <Modal isOpen={modal} toggle={toggle} >\r\n                <ModalHeader toggle={toggle}>Create A New Poll</ModalHeader>\r\n                <ModalBody>\r\n                <Form>\r\n                <FormGroup>\r\n                    <Input type=\"text\" placeholder=\"Give a title\" className=\"my-2\"/>\r\n                    <Input type=\"textarea\" placeholder=\"Give a description\" />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                   <div> <span>Enter a option</span> <Button color=\"info\" className=\"ml-3\">Add New Options</Button> </div> \r\n                   <Row className=\"my-2\">\r\n                   <Col>\r\n                        <Input type=\"text\" />\r\n                   </Col>\r\n                        <Button color=\"danger\" disabled>Delete</Button>\r\n                   </Row>\r\n                   <Row className=\"my-2\">\r\n                   <Col>\r\n                        <Input type=\"text\" />\r\n                   </Col>\r\n                        <Button color=\"danger\" disabled>Delete</Button>\r\n                   </Row>\r\n                   \r\n                   \r\n                  \r\n                </FormGroup>\r\n                </Form>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                <Button color=\"primary\" onClick={toggle}>Create Poll</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddPollModal\r\n","import React,{useState} from 'react';\r\nimport {Button, Form, FormGroup,Input} from 'reactstrap';\r\nimport AddPollModal from './AddPollModal';\r\n\r\nfunction Sidebar() {\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n\r\n    return (\r\n        <div>\r\n            <Form inline>\r\n                <FormGroup className=\"mr-2\">\r\n                    <Input type=\"text\" name=\"serach\" placeholder=\"Search Polls\"></Input>\r\n\r\n                </FormGroup>\r\n                {/* <Button color=\"primary\" modal={modal} onClick={toggle}>Add</Button> */}\r\n                <AddPollModal modal={modal} toggle={toggle}/>\r\n            </Form>\r\n            <div className=\"mt-5\">\r\n                <h3>Lists of polls</h3>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from 'react'\r\nimport {Form,FormGroup,CustomInput,Row,Col, Button,Badge, Label,Input} from 'reactstrap'\r\nfunction Poll() {\r\n    return (\r\n        <div>\r\n            <h3>What is your favourite programming language?</h3>\r\n            <p>There are lot of programming languages.Among them what is your favourite</p>\r\n            <Row className=\"mb-5 mt-4\">\r\n                <Col md={6}>\r\n                    <h3>Options</h3>\r\n                </Col>\r\n                <Col>\r\n                    <Button color=\"warning\" className=\"mr-2\">Edit</Button>\r\n                    <Button color=\"danger\">Delete</Button>\r\n                </Col>\r\n            </Row>\r\n            <Form>\r\n            <Row>\r\n                <Col>\r\n                    <FormGroup>\r\n                    <CustomInput type=\"radio\"  name=\"customRadio\" label=\"Java\" />\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                    <Badge color=\"primary\" className=\"m-2 p-3\" style={{ fontSize: \"100%\" }}>7</Badge>\r\n                    <Badge color=\"danger\" className=\"p-3\" style={{ fontSize: \"100%\" }}>25%</Badge>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <FormGroup>\r\n                    <CustomInput type=\"radio\"  name=\"customRadio\" label=\"Javascript\" />\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                    <Badge color=\"primary\" className=\"m-2 p-3\" style={{ fontSize: \"100%\" }}>9</Badge>\r\n                    <Badge color=\"danger\" className=\"p-3\" style={{ fontSize: \"100%\" }}>55%</Badge>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <FormGroup>\r\n                    <CustomInput type=\"radio\"  name=\"customRadio\" label=\"Python\" />\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                    <Badge color=\"primary\" className=\"m-2 p-3\" style={{ fontSize: \"100%\" }}>15</Badge>\r\n                    <Badge color=\"danger\" className=\"p-3\" style={{ fontSize: \"100%\" }}>75%</Badge>\r\n                </Col>\r\n            </Row>\r\n            \r\n                <FormGroup>\r\n                    <Label>Enter Your Name</Label>\r\n                    <Input type=\"text\" name=\"perticipants\" placeholder=\"Your name\"/>\r\n                    <Button color=\"success\" className=\"my-2\">Submit Your Opinion</Button>\r\n                </FormGroup>\r\n            \r\n            </Form>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Poll\r\n","import React from 'react';\r\nimport Poll from './pollComponent';\r\n\r\nfunction MainContent() {\r\n    return (\r\n        <>\r\n        {/* <div>\r\n            <h3>Welcome to my <em>'Poll App'</em></h3>\r\n            <p>You can create as many poll as you want.Click the new button create new poll.To check details poll,pls click select from the left sidebar.By selecting a poll,you can check its details,perticipate and check other opinion about this poll</p>\r\n        </div> */}\r\n        <Poll />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainContent\r\n","import React from 'react';\nimport './App.css';\nimport {Container,Row,Col} from 'reactstrap';\nimport Sidebar from  './Sidebar/sidebarComponent';\nimport MainContent from './MainComponent/mainComponent';\n\nfunction App() {\n  return (\n    <Container className=\"my-5\">\n      <Row>\n        <Col md={4}>\n          <Sidebar />\n        </Col>\n        <Col md={8}>\n\t\t\t<MainContent />\n\t\t</Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}